import telebot
import sqlite3
import traceback

from telebot import types, apihelper
from utils import *
from config import *


apihelper.ENABLE_MIDDLEWARE = True
bot = telebot.TeleBot(f"{TG_TOKEN}", parse_mode='MarkdownV2')

conn = sqlite3.connect('db.db', check_same_thread=False)
conn.row_factory = lambda c, r: dict(zip([col[0] for col in c.description], r))
cursor = conn.cursor()

USER_INPUT_FLAGS = {}

@bot.middleware_handler(update_types=['message'])
def set_session(bot_instance, message):
    user_id = message.from_user.id
    user_data = get_user_or_none(user_id, cursor)
    if not user_data:
        create_user(user_id, message.chat.id, cursor, conn)
        user_data = get_user_or_none(user_id, cursor)
    message.user_data = user_data


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    if message.user_data['notifications_status']:
        itembtn1 = types.InlineKeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="stop_notifications")
    else:
        itembtn1 = types.InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="start_notifications")
    markup.add(itembtn1)
    bot.reply_to(message,
                 "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\! üëãüèª\n\nüíå _–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –æ –∫–æ—Ç–æ—Ä—ã—Ö –í–∞–º —Å—Ç–æ–∏—Ç –∑–Ω–∞—Ç—å\.\n\nüì™ –í—ã "
                 "–º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –±–æ—Ç–∞\._",
                 reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "stop_notifications")
def stop_notifiactions(call):
    user_id = call.from_user.id
    stop_user_notifications(user_id, cursor, conn)

    markup = types.InlineKeyboardMarkup(row_width=1)
    itembtn1 = types.InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="start_notifications")
    markup.add(itembtn1)

    bot.reply_to(call.message,
                 "üòî –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–µ–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\.\n\nüì™ _–ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º, –í—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, "
                 "—Ç–æ –Ω–∞–∂–º–∏—Ç–µ \"–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\"\._", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "start_notifications")
def start_notifiactions(call):
    user_id = call.from_user.id
    start_user_notifications(user_id, cursor, conn)

    markup = types.InlineKeyboardMarkup(row_width=1)
    itembtn1 = types.InlineKeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="stop_notifications")
    markup.add(itembtn1)

    bot.reply_to(call.message,
                 "‚ò∫Ô∏è–†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤–∫–ª—é—á–µ–Ω–∞\.\n\nüì´ _–ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º, –í—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ "
                 "\"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\"\._", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
def start_mailing(message):
    if message.user_data['admin_status']:
        user_id = message.from_user.id
        USER_INPUT_FLAGS[user_id] = True
        markup = types.ReplyKeyboardMarkup(row_width=1)
        itembtn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup.add(itembtn1)

        bot.reply_to(message,
                     "*\(\!\)* –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∏ —è __—Å—Ä–∞–∑—É –∂–µ –µ–≥–æ —Ä–∞–∑–æ—à–ª—é__\.\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["/adm", "–û—Ç–º–µ–Ω–∞"])
def admin_panel(message):
    if message.user_data['admin_status']:
        user_id = message.from_user.id
        USER_INPUT_FLAGS[user_id] = False
        markup = types.ReplyKeyboardMarkup(row_width=1)
        itembtn1 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
        itembtn2 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        markup.add(itembtn1, itembtn2)

        bot.reply_to(message,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\! üëãüèª\n\nüñ• _–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –Ω–∏–∂–µ –∏–ª–∏ "
                     "–≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ\._", reply_markup=markup)


@bot.message_handler(func=lambda message: USER_INPUT_FLAGS.get(message.from_user.id), content_types=['document', 'audio', 'photo', 'video', 'text'])
def send_notifications(message):
    users = get_all_users(cursor)

    markup = types.InlineKeyboardMarkup(row_width=1)
    itembtn1 = types.InlineKeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="stop_notifications")
    markup.add(itembtn1)

    if message.content_type == "text":
        for user in users:
            try:
                bot.send_message(user['chat_id'], text=message.text, reply_markup=markup)
            except:
                traceback.print_exc()
                continue

    elif message.content_type == "photo":
        for user in users:
            try:
                bot.send_photo(user['chat_id'], photo=message.photo[-1].file_id, caption=message.caption, reply_markup=markup)
            except:
                traceback.print_exc()
                continue

    elif message.content_type == "video":
        file_id_info = bot.get_file(message.video.file_id)
        downloaded_file = bot.download_file(file_id_info.file_path)
        for user in users:
            try:
                bot.send_video(user['chat_id'], data=downloaded_file, caption=message.caption, reply_markup=markup)
            except:
                traceback.print_exc()
                continue

    markup = types.ReplyKeyboardMarkup(row_width=1)
    itembtn1 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    itembtn2 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    itembtn3 = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(itembtn1, itembtn2, itembtn3)

    USER_INPUT_FLAGS[message.from_user.id] = False

    bot.send_message(message.chat.id,
                 "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–∫–æ–Ω—á–µ–Ω–∞\!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\! üëãüèª\n\nüñ• _–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –Ω–∏–∂–µ –∏–ª–∏ "
                 "–≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ\._", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == f"{ADMIN_PASS}")
def admin_auth(message):
    user_id = message.from_user.id
    set_admin_status(user_id, cursor, conn)

    bot.reply_to(message,
                 "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üëãüèª\n\nüñ• _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É */adm*, "
                 "—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å *–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\._ ")


@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def admin_auth(message):
    if message.user_data['admin_status']:
        bot.reply_to(message,
                     get_bot_stats(cursor))


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    markup = types.InlineKeyboardMarkup()
    if message.user_data['notifications_status']:
        itembtn1 = types.InlineKeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="stop_notifications")
    else:
        itembtn1 = types.InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data="start_notifications")
    markup.add(itembtn1)

    bot.reply_to(message,
                 "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\! üëãüèª\n\nüíå _–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –æ –∫–æ—Ç–æ—Ä—ã—Ö –í–∞–º —Å—Ç–æ–∏—Ç –∑–Ω–∞—Ç—å\.\n\nüì™ –í—ã "
                 "–º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –±–æ—Ç–∞\._",
                 reply_markup=markup)



bot.polling(none_stop=True)
